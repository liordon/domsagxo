from compilation.definitions import ReservedWord, UnalphabeticTerminal

english_keywords_dictionary = {
    "afterwards": ReservedWord.AND_THEN,
    "and": ReservedWord.AND,
    "assign": ReservedWord.PUT,
    "at": ReservedWord.AT,
    "day": ReservedWord.TIME_INDICATION,
    "days": ReservedWord.TIME_INDICATION,
    "else": ReservedWord.ELSE,
    "end": ReservedWord.END,
    "equal": ReservedWord.EQUAL,
    "every": ReservedWord.EVERY,
    "greater": ReservedWord.GREATER,
    "hour": ReservedWord.TIME_INDICATION,
    "hours": ReservedWord.TIME_INDICATION,
    "if": ReservedWord.IF,
    "is": ReservedWord.IS,
    "not": ReservedWord.NOT,
    "of": ReservedWord.OF,
    "once": ReservedWord.ONCE,
    "simultaneously": ReservedWord.SIMULTANEOUSLY,
    "than": ReservedWord.THAN,
    "then": ReservedWord.THEN,
    "the": ReservedWord.THE,
    "times": UnalphabeticTerminal.TIMES,
    "to": ReservedWord.TO,
    "lesser": ReservedWord.SMALLER,
    "means": ReservedWord.THIS_WAY,
    "minus": UnalphabeticTerminal.MINUS,
    "minute": ReservedWord.TIME_INDICATION,
    "minutes": ReservedWord.TIME_INDICATION,
    "month": ReservedWord.TIME_INDICATION,
    "months": ReservedWord.TIME_INDICATION,
    "or": ReservedWord.OR,
    "parts": UnalphabeticTerminal.DIVIDE,
    "plus": UnalphabeticTerminal.PLUS,
    "return": ReservedWord.RETURN,
    "second": ReservedWord.TIME_INDICATION,
    "seconds": ReservedWord.TIME_INDICATION,
    "week": ReservedWord.TIME_INDICATION,
    "weeks": ReservedWord.TIME_INDICATION,
    "whenever": ReservedWord.WHENEVER,
    "while": ReservedWord.DURING,
    "year": ReservedWord.TIME_INDICATION,
    "years": ReservedWord.TIME_INDICATION,
    ".": UnalphabeticTerminal.COMMENT,
    ",": UnalphabeticTerminal.COLON,
    ":": UnalphabeticTerminal.COMMENT,
    "+": UnalphabeticTerminal.PLUS,
    "-": UnalphabeticTerminal.MINUS,
    "*": UnalphabeticTerminal.TIMES,
    "/": UnalphabeticTerminal.DIVIDE,
    "(": UnalphabeticTerminal.L_PAREN,
    ")": UnalphabeticTerminal.R_PAREN,
    ">": UnalphabeticTerminal.GREATER_THAN,
    "<": UnalphabeticTerminal.LESSER_THAN,
    ">=": UnalphabeticTerminal.GREATER_EQUAL,
    "<=": UnalphabeticTerminal.LESSER_EQUAL,
    "≥": UnalphabeticTerminal.GREATER_EQUAL,
    "≤": UnalphabeticTerminal.LESSER_EQUAL,
}